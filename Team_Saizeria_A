      #include <Shield_PS2.h>
      #include <SoftwareSerial.h>
      #include <Servo.h>
      #include <FlexiTimer2.h>
    
      PS2 ps2=PS2();
      Servo arm_catcher1;
      Servo arm_catcher2;
      Servo arm_spinner;
    
      int ang_arm_catcher1;
      int ang_arm_catcher2;
      int ang_arm_spinner;

      int arm_catcher_count = 0;
      int arm_spinner_count = 0;

      int catcher_button1pre;
      int catcher_button2pre;
      int spinner_button1pre;
      int spinner_button2pre;
      
      int catcher_button1;
      int catcher_button2;
      int spinner_button1;
      int spinner_button2;

      int time_arm_catcher;
      int time_arm_spinner;
    
      int t = 0;
    
      void setup(){
        ps2.init(9600, 0, 1);
        Serial.begin(9600);
        //ps2.init(9600, 0, 1);
        //0,1番に割り当てる時はarduinoの書き込み時にシールドを外して行う。

        arm_catcher1.attach(2, 900, 2100);
        arm_catcher2.attach(4, 900, 2100);
        arm_spinner.attach(7, 900, 2100);

        arm_catcher1.writeMicroseconds(ang_arm_catcher1);
        arm_catcher2.writeMicroseconds(ang_arm_catcher2);
        arm_spinner.writeMicroseconds(ang_arm_spinner);

        //arm_catcher_count = 0;
        //arm_spinner_count = 0;

        time_arm_catcher = 1;
        time_arm_spinner = 1;
    
        //FlexiTimer2::set(100, flash); // 500ms period
        //FlexiTimer2::start();
      }
    
      void loop() {
        catcher_button1 = ps2.getval(p_l1);
        catcher_button2 = ps2.getval(p_r1);
        spinner_button1 = ps2.getval(p_l2);
        spinner_button2 = ps2.getval(p_r2);
        
        if( catcher_button1 == 0 && catcher_button1pre == 1 )
          {
              arm_catcher_count = count_plus( -1, 4, arm_catcher_count );
          }
        else if( catcher_button2 == 0 && catcher_button2pre == 1 )
          {
              arm_catcher_count = count_minus( -1, 4, arm_catcher_count );
          }
        else if( spinner_button1 == 0 && spinner_button1pre == 1  )     
          {
              arm_spinner_count = count_plus( -1, 3, arm_spinner_count );
          }
        else if( spinner_button2 == 0 && spinner_button2pre == 1 )
          {
              arm_spinner_count = count_minus( -1, 3, arm_spinner_count );
          }
         else
          {
          }

        arm_catcher_action();
        arm_spinner_action();
        delay(t);

        catcher_button1pre = catcher_button1;
        catcher_button2pre = catcher_button2;
        spinner_button1pre = spinner_button1;
        spinner_button2pre = spinner_button2;
        
      }

      void arm_catcher_action(){
        switch(arm_catcher_count){
              
        case -1:
        arm_catcher_count = 0;
        break;
        
        case 0:
        ang_arm_catcher1 = 1000;
        ang_arm_catcher2 = 2100;
        speed_controll(ang_arm_catcher1, time_arm_catcher, arm_catcher1);
        speed_controll(ang_arm_catcher2, time_arm_catcher, arm_catcher2);
        break;
        
        /*case 1:
        ang_arm_catcher1 = 1400;
        ang_arm_catcher2 = 1700;
        speed_controll(ang_arm_catcher1, time_arm_catcher, arm_catcher1);
        speed_controll(ang_arm_catcher2, time_arm_catcher, arm_catcher2);
        break;
  
        case 2:
        ang_arm_catcher1 = 1700;
        ang_arm_catcher2 = 1400;
        speed_controll(ang_arm_catcher1, time_arm_catcher, arm_catcher1);
        speed_controll(ang_arm_catcher2, time_arm_catcher, arm_catcher2);
        break;*/
   
        case 1:
        ang_arm_catcher1 = 2100;
        ang_arm_catcher2 = 1000;
        speed_controll(ang_arm_catcher1, time_arm_catcher, arm_catcher1);
        speed_controll(ang_arm_catcher2, time_arm_catcher, arm_catcher2);
        break;
  
        case 2:
        arm_catcher_count = 1;
        break;
        }
      }
      
      void arm_spinner_action(){
        switch(arm_spinner_count){
              
        case -1:
        arm_spinner_count = 0;
        break;
        
        case 0:
        ang_arm_spinner = 1000;
        speed_controll(ang_arm_spinner, time_arm_spinner, arm_spinner);
        break;
        
        case 1:
        ang_arm_spinner = 1500;
        speed_controll(ang_arm_spinner, time_arm_spinner, arm_spinner);
        break;
  
        case 2:
        ang_arm_spinner = 2000;
        speed_controll(ang_arm_spinner, time_arm_spinner, arm_spinner);
        break;
  
        case 3:
        arm_spinner_count = 2;
        break;
        }
      }

      void speed_controll(int ang, int time, Servo servo_name)
      {
        int ang_now =  servo_name.readMicroseconds();

        if(ang > ang_now)
        {
          for(int i = ang_now; i <= ang; i++)
          {
            servo_name.writeMicroseconds(i);
            delay(time);
          }
        }
        else if(ang < ang_now)
        {
          for(int i = ang_now; i >= ang; i--)
          {
            servo_name.writeMicroseconds(i);
            delay(time);
          }
        }
        else
        {
          //do nothing
        }
      }

      int count_plus( int count_min, int count_max, int count_now )
      {
        if( count_min <= count_now && count_now <= count_max )
        {
          return count_now + 1;
        }
        else if( count_now < count_min )
        {
          return count_min;
        }
        else if( count_max < count_now )
        {
          return count_max;
        }
        else
        {
          
        }
      }

      int count_minus( int count_min, int count_max, int count_now )
      {
        if( count_min <= count_now && count_now <= count_max )
        {
          return count_now - 1;
        }
        else if( count_now < count_min )
        {
          return count_min;
        }
        else if( count_max < count_now )
        {
          return count_max;
        }
        else
        {
          
        }
      }
    
      /*void flash() 
      {
        static boolean output = HIGH;
        Serial.println(output);
        output = !output;
      }*/
